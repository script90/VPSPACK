#!/bin/bash
if [ $(id -u) -eq 0 ]
then
clear
else
echo -e "Execute o script como usuario \033[1;32mroot\033[0m"
exit
fi
if [ -d /etc/VpsPackdir ]
then
true
else
mkdir /etc/VpsPackdir
fi
if [ -d /etc/VpsPackdir/senha ]
then
true
else
mkdir /etc/VpsPackdir/senha
fi
if [ -d /etc/VpsPackdir/limite ]
then
true
else
mkdir /etc/VpsPackdir/limite
fi

function sistemadetalhes(){
if [ -f /proc/cpuinfo ]
then
echo -e "\n\033[1;30mProcessador\033[0m"
modelo=$(cat /proc/cpuinfo |grep "model name" |uniq |awk -F : {'print $2'})
cpucores=$(cat /proc/cpuinfo |grep "cpu cores" |uniq |awk -F : {'print $2'})
cache=$(cat /proc/cpuinfo |grep "cache size" |uniq |awk -F : {'print $2'})
echo -e "\033[1;32mModelo:\033[0m$modelo"
echo -e "\033[1;32mNucleos:\033[0m$cpucores"
echo -e "\033[1;32mMemoria Cache:\033[0m$cache"
echo -e "\033[1;32mArquitetura: \033[0m$(uname -p)"
else
echo -e "\033[1;30mProcessador\033[0m"
echo "Não foi possivel encontrar /proc/cpuinfo"
fi
if [ -f /etc/lsb-release ]
then
echo -e "\n\033[1;30mSistema Operacional\033[0m"
name=$(cat /etc/lsb-release |grep DESCRIPTION |awk -F = {'print $2'})
codename=$(cat /etc/lsb-release |grep CODENAME |awk -F = {'print $2'})
echo -e "\033[1;32mNome: \033[0m$name"
echo -e "\033[1;32mCodeName: \033[0m$codename"
echo -e "\033[1;32mKernel: \033[0m$(uname -s)"
echo -e "\033[1;32mKernel Release: \033[0m$(uname -r)"
if [ -f /etc/os-release ]
then
devlike=$(cat /etc/os-release |grep LIKE |awk -F = {'print $2'})
echo -e "\033[1;32mDerivado do Antecedente OS: \033[0m$devlike"
fi
else
echo -e "\n\033[1;30mSistema Operacional\033[0m"
echo "Não foi possivel encontrar /etc/lsb-release"
fi
if free 1>/dev/null 2>/dev/null
then
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i mem |awk {'print $2'}) MB | $(( $(free -m |grep -i mem |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEm Uso: \033[0m$(free -m |grep -i mem |awk {'print $3'}) MB | $(( $(free -m |grep -i mem |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLivre: \033[0m$(free -m |grep -i mem |awk {'print $4'}) MB | $(( $(free -m |grep -i mem |awk {'print $4'}) / 1024 )) GB"
echo -e "\n\033[1;30mSwap\033[0m"
echo -e "\033[1;32mTotal: \033[0m$(free -m |grep -i swap |awk {'print $2'}) MB | $(( $(free -m |grep -i swap |awk {'print $2'}) / 1024 )) GB"
echo -e "\033[1;32mEm Uso: \033[0m$(free -m |grep -i swap |awk {'print $3'}) MB | $(( $(free -m |grep -i swap |awk {'print $3'}) / 1024 )) GB"
echo -e "\033[1;32mLivre: \033[0m$(free -m |grep -i swap |awk {'print $4'}) MB | $(( $(free -m |grep -i swap |awk {'print $4'}) / 1024 )) GB"
else
echo -e "\n\033[1;30mMemoria RAM\033[0m"
echo "Não foi possivel obter informações sobre a memoria RAM"
fi
}
function monitorar(){
clear
rm -f /tmp/sshmon-tmpdata.tmp
rm -f /tmp/pid
rm -f /tmp/pid2
rm -f /tmp/pids
rm -f /tmp/sks
echo -n > /tmp/pid2
ps ax|grep dropbear > /tmp/pid
cat /tmp/pid | grep -i 'dropbear -p' > /tmp/pids
cat /var/log/auth.log |  grep -i "Password auth succeeded" > /tmp/sks
perl -pi -e 's/Password auth succeeded for//g' /tmp/sks
perl -pi -e 's/dropbear//g' /tmp/sks

cat /tmp/pid | while read line;do
set -- $line
p=$1
var=`cat /tmp/sks | grep -i $1`
set -- $var
if [ "$6" != '' ]
then
l=`echo $6 | sed -r "s/'//g"`

echo "$l $p $3 DropBear" >> /tmp/sshmon-tmpdata.tmp

fi
 done
ps -ef | grep sshd | grep priv | awk '{print $9,"   ",$2,"  ",$5,"  OpenSSH"}' >> /tmp/sshmon-tmpdata.tmp
openetwork=`grep "server " /etc/openvpn/server.conf | awk '{print $2}' | awk -F'.' '{print $1"."$2}'`
grep $openetwork /var/log/openvpn-status.log | awk -F, '{print $2,$4}' | awk '{print $1,$4"-"$3,$5,"  OpenVPN"}' >> /tmp/sshmon-tmpdata.tmp

    rm -f /tmp/pid
    rm -f /tmp/pid2
    rm -f /tmp/pids
    rm -f /tmp/sks



#fun_monitor | awk '{print $1,$3}' | sed '/|/d' | sed '/root/d' > /tmp/sshmon-tmpdata.tmp
database="/tmp/sshmon-tmpdata.tmp"
echo -e "\E[44;1;37m Usuario       Conexão          Tipo     Tempo   \E[0m"
	while read usline
	do
		user="$(echo $usline | awk '{print $1}')"
   time="$(echo $usline | awk '{print $3}')"
   tipo="$(echo $usline | awk '{print $4}')"
		if [ -z "$user" ] ; then
			echo "" > /dev/null
		else
			#grep $user $database > /tmp/tmp2
			#grep $user /etc/openvpn/openvpn-status.log | grep 192.168 | awk -F, '{print $2}' >> /tmp/tmp2
			s1ssh="$(grep -w $user $database | wc -l)"
			s2ssh="$(grep -w $user /root/usuarios.db | awk '{print $2}')"
			if [ -z "$s2ssh" ]; then
			 s2ssh="+"
			fi
   if [ "$user" == "unknown" ]; then
   kill $(grep -w $user $database | cut -d' ' -f2 | tr '\n' ' ') > /dev/null 2>&1
   fi
    echo -ne "\033[1;33m"
#    printf '%-15s%-8s%-10s%s\n' " $user"      "$s1ssh/$s2ssh" "$time" 
    printf '%-17s%-14s%-10s%s\n' " $user"      "$s1ssh/$s2ssh" "$tipo" "$time"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"

fi
	done < "$database"
  total=`grep -w DropBear $database | wc -l`
  totalssh=`grep -w OpenSSH $database | wc -l`
  totalovpn=`grep -w OpenVPN $database | wc -l`
  totalgeral=$(($total+$totalssh+$totalovpn))

   rm -f "$database"
echo -e "\033[1;33m TOTAL OPENSSH  :                    $totalssh online    "
echo -e "\033[1;33m TOTAL DROPBEAR :                    $total online   "
echo -e "\033[1;33m TOTAL OPENVPN  :                    $totalovpn online    "
echo -e "\033[1;33m TOTAL GERAL    :                    $totalgeral online   "
echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
}
function removerexpirados(){
clear
echo -e "         \033[1;33mRemover Usuarios Expirados\033[0m"
datahoje=$(date +%s)
for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
do
dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
if [[ $dataexp == ' never' ]]; then
id > /dev/null 2>/dev/null
else
dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
dataexpnum=$(date '+%s' -d"$dataexp")
fi
if [[ $dataexpnum < $datahoje ]]; then
printf "\033[1;31m"
printf '%-41s' $user
printf "\033[0m"
echo "Expired Deleted"
kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
else
printf "\033[1;32m"
printf '%-41s' $user
printf "\033[0m"
echo $dataexpn
fi
done
}
function criarusuarioteste(){
mkdir /etc/usuariosteste 1>/dev/null 2>/dev/null
echo -e "   Usuarios teste"
for testus in $(ls /etc/usuariosteste |sort |sed 's/.sh//g')
do
echo "$testus"
done
printf "\n"
printf "Nome do novo usuario: "; read nome
printf "Senha do usuario: "; read pass
echo -e "\nUse s = segundos, m = minutos, h = horas e d = dias EX: 14s ."
printf "Quanto tempo usuario $nome deve durar: ";read tempoin
tempo=$(echo "$tempoin" |sed 's/ //g')
useradd -M -s /bin/false $nome
(echo $pass;echo $pass) |passwd $nome 1>/dev/null 2>/dev/null
echo "#!/bin/bash
sleep $tempo
kill"' $(ps -u '"$nome |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $nome
rm -rf /etc/usuariosteste/$nome.sh
exit" > /etc/usuariosteste/$nome.sh
echo -e "Usuario: $nome
Senha: $pass
Validade: $tempo\n
Apos o tempo expirar o usuario sera deletado e todos serão desconectados."
bash /etc/usuariosteste/$nome.sh &
exit
}

function removerlimite(){
echo -ne "\033[1;32mQual usuario a retirar o limite: \033[0m"
read user
cronsemuser=$(cat /etc/crontab |grep -v "#$user#")
echo "$cronsemuser" > /etc/crontab
rm -rf /etc/VpsPackdir/limite/$user 2>/dev/null
rm -rf /etc/VpsPackdir/limite/$user.sh 2>/dev/null
pids=$(ps x |grep "#$user#" |awk {'print $1'})
kill $pids 2>/dev/null
kill "$pids" 2>/dev/null
kill -9 `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
kill `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
echo -e "\033[1;37mUsuario: $user, Limite removido\033[0m"
}
function backup_de_usuarios(){
clear
echo -e "\033[1;37mFazendo Backup de Usuarios...\033[0m"
for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`
do
if [ -e /etc/VpsPackdir/senha/$user ]
then
pass=$(cat /etc/VpsPackdir/senha/$user)
else
echo -e "\033[1;31mNão foi possivel ter a senha do usuario\033[1;37m ($user)"
read -p "Digite a Senha Manualmente ou Tecle ENTER: " pass
fi

if [ -e /etc/VpsPackdir/limite/$user ]
then
limite=$(cat /etc/VpsPackdir/limite/$user)
echo "$user:$pass:$limite" >> /etc/VpsPackdir/backup
echo -e "\033[1;37mUser $user Backup [\033[1;31mOK\033[1;37m]\033[0m"
else
echo "$user:$pass" >> /etc/VpsPackdir/backup
echo -e "\033[1;37mUser $user Backup [\033[1;31mOK\033[1;37m]\033[0m"
fi
done
echo " "
echo -e "\033[1;31mBackup Completo !!!\033[0m"
echo " "
echo -e "\033[1;37mAs informações sobre usuarios ficam no arquivo \033[1;31m /etc/VpsPackdir/backup \033[1;37m
Guarde os Para uma futura Restauração\033[0m"
}
function mudarnome(){
printf "Usuario qual deseja mudar o nome: "; read user
if cat /etc/passwd |grep $user: >/dev/null 2>/dev/null
then
printf ""
else
echo "Usuario não existe"
exit
fi
printf "Novo nome para usuario $user: "; read nome
usermod -l $nome $user 1>/dev/null 2>/dev/null
echo -e "\nUsuario: $user, Novo nome: $nome."
exit
}

function detalhes_usuarios(){
clear

echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
echo -e "\033[1;37m Usuario               Senha               Data E.          Logins S. \033[0m"
echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |sort |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
do

if cat /etc/VpsPackdir/limite/$users > /dev/null 2> /dev/null
then
limitecs=$(cat /etc/VpsPackdir/limite/$users)
else
limitecs="null"
fi

if  senha=$(cat /etc/VpsPackdir/senha/$users > /dev/null 2> /dev/null)
then
senha=$(cat /etc/VpsPackdir/senha/$users)
else
senha="null"
fi

data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
if [ $data = never ] 2> /dev/null
then
date="Nunca"
fi
detalhesdata=$(printf '%-18s' "$data")
detalheslimit=$(printf '%-10s' "$limitecs")
detalhes=$(printf ' %-21s' "$users")
detalhespass=$(printf '%-18s' "$senha")
echo -e "\033[1;33m$detalhes $detalhespass $detalhesdata $detalheslimit\033[0m"
echo -e "\033[1;30m----------------------------------------------------------------------\033[0m"
done
}
function restaurar_usuarios(){
echo -n "Digite o diretorio do arquivo Backup: "
read arq
echo -e "\033[1;37mRestaurando Usuarios...\033[0m"

for user in `cat $arq`
do
usuario=$(echo "$user" |awk -F : '{print $1}')
senha=$(echo "$user" |awk -F : '{print $2}')
if cat /etc/passwd |grep $usuario: 1> /dev/null 2>/dev/null
then
echo " " > /dev/null
else
echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
  if [ $? = 0 ]
  then
  limite=$(echo "$user" |awk -F : '{print $3}')
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  limit $usuario $limite 1> /dev/null 2> /dev/null
  echo "$senha" > /etc/gerenciadorinfo/senha/$usuario
  else
  useradd -M -s /bin/false $usuario
  (echo $senha ; echo $senha) | passwd $usuario > /dev/null 2> /dev/null
  echo "$senha" > /etc/gerenciadorinfo/senha/$usuario
  fi
  echo -e "\033[1;37mUsuario: \033[1;31m$usuario \033[1;37mBackup: [\033[1;31mOk\033[1;37m]\033[0m"
fi
done
}
function banner(){
sshd_config_bak=$(cat /etc/ssh/sshd_config |grep -v "Banner")
echo "$sshd_config_bak" > /etc/ssh/sshd_config
echo "Banner /etc/bannerssh" >> /etc/ssh/sshd_config
service ssh restart 1>/dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null
if [ -f /etc/bannerssh ]
then
banner=$(cat /etc/bannerssh)
else
banner="Não há um banner no momento"
fi
echo -e "\033[1;32mBanner atual\n\n\033[1;37m$banner\n\033[0m"
echo "Qual banner deseja adicionar (ctrl + c para sair )"
read -p ": " bannerssh
echo "$bannerssh" > /etc/bannerssh
service ssh restart 1> /dev/null 2>/dev/null
service sshd restart 1>/dev/null 2>/dev/null
}
function deletar_todos(){
for user in $(cat /etc/passwd |awk -F : '$3 > 900 {print $1}' |grep -v "rick" |grep -vi "nobody")
do
userpid=$(ps -u $user |awk {'print $1'})
kill "$userpid" 2>/dev/null
userdel $user
echo "$user Deletado"
done
}
clear
if [[ $1 == "" ]]
then
echo -e "\033[1;37m       VpsPack Socks © BR \033[0m"
echo -e "\033[1;37m Escolha uma opção:    Para Sair Ctrl + C\033[1;33m
[\033[1;30m01\033[1;33m] Criar_Usuario \033[1;30m(Criar usuarios)\033[1;33m
[\033[1;30m02\033[1;33m] Criar_Teste \033[1;30m(Criar usuarios de curta duração)\033[1;33m
[\033[1;30m03\033[1;33m] Deletar_Usuario \033[1;30m(Menu Deletar, Desconectar, etc)\033[1;33m
[\033[1;30m04\033[1;33m] Monitorar \033[1;30m(Monitorar conexões atuais)\033[0m\033[1;33m
[\033[1;30m05\033[1;33m] Limite \033[1;30m(limite de conexoes simultaneas)\033[1;33m
[\033[1;30m06\033[1;33m] Remover_Limite \033[1;30m(Remover limite de conexoes de um usuario)\033[1;33m
[\033[1;30m07\033[1;33m] Redefinir_Usuario \033[1;30m(Redefinir Data, senha, etc)\033[1;33m
[\033[1;30m08\033[1;33m] Backup-Users \033[1;30m(Backup dos usuarios)\033[1;33m
[\033[1;30m09\033[1;33m] Rest-Backup \033[1;30m(Restaurar usuarios feito backup)\033[1;33m
[\033[1;30m10\033[1;33m] Usuarios_Detalhes \033[1;30m(Informacoes sobre os usuarios !!)\033[1;33m
[\033[1;30m11\033[1;33m] Remover_expirados \033[1;30m(Remover usuarios ja expirados)\033[1;33m
[\033[1;30m12\033[1;33m] Speedtest \033[1;30m(Teste de conexão [velocidade de banda])\033[1;33m
[\033[1;30m13\033[1;33m] Sistema_Detalhes \033[1;30m(Detalhes sobre o Sistema)\033[1;33m
[\033[1;30m14\033[1;33m] Banner SSH\033[1;30m(Adicionar um banner)\033[1;33m
[\033[1;30m15\033[1;33m] Deletar_Todos \033[1;30m(Todos os usuarios serão deletados)\033[1;33m
[\033[1;30m16\033[1;33m] Desinstalar \033[1;30m(Remover VpsPack)\033[0m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
  1 | 01 )
   criarusuario;;
  2 | 02 )
   criarusuarioteste;;
  3 | 03 )
   deletarusuario;;
  4 | 04 )
   monitorar;;  
  5 | 05 )
   read -p "Usuario: " user
   read -p "Limite: " limite
   limite $user $limite;;
  6 | 06 )
   removerlimite;;
  7 | 07 )
   redefinirusuario;;
  8 | 08 )
   backup_de_usuarios;;
  9 | 09 )
   restaurar_usuarios;;
  10)
   detalhes_usuarios;;
  11)
   removerexpirados;;
  12)
   speedtest-cli;;
  13)
   sistemadetalhes;;
  14)
   banner;;
  15)
   deletar_todos;;
  16)
   rm -rf /bin/limite 2>/dev/null
   rm -rf /bin/criarusuario 2>/dev/null
   rm -rf /bin/deletarusuario 2>/dev/null
   rm -rf /bin/redefinirusuario 2>/dev/null
   rm -rf /bin/menu 2>/dev/null
   rm -rf /bin/speedtest.py 2>/dev/null
   rm -rf /bin/proxy.py 2>/dev/null
   rm -rf /bin/badvpn-udpgw 2>/dev/null
   rm -rf /etc/autostart 2>/dev/null;;   

esac
